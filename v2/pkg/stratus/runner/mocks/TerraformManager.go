// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TerraformManager is an autogenerated mock type for the TerraformManager type
type TerraformManager struct {
	mock.Mock
}

// Initialize provides a mock function with given fields:
func (_m *TerraformManager) Initialize() {
	_m.Called()
}

// TerraformDestroy provides a mock function with given fields: directory
func (_m *TerraformManager) TerraformDestroy(directory string) error {
	ret := _m.Called(directory)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerraformInitAndApply provides a mock function with given fields: directory
func (_m *TerraformManager) TerraformInitAndApply(directory string) (map[string]string, error) {
	ret := _m.Called(directory)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(directory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTerraformManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTerraformManager creates a new instance of TerraformManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTerraformManager(t mockConstructorTestingTNewTerraformManager) *TerraformManager {
	mock := &TerraformManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
