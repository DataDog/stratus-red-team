// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FileSystemMock is an autogenerated mock type for the FileSystem type
type FileSystemMock struct {
	mock.Mock
}

// CreateDirectory provides a mock function with given fields: _a0, _a1
func (_m *FileSystemMock) CreateDirectory(_a0 string, _a1 fs.FileMode) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.FileMode) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileExists provides a mock function with given fields: _a0
func (_m *FileSystemMock) FileExists(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadFile provides a mock function with given fields: _a0
func (_m *FileSystemMock) ReadFile(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDirectory provides a mock function with given fields: _a0
func (_m *FileSystemMock) RemoveDirectory(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteFile provides a mock function with given fields: _a0, _a1, _a2
func (_m *FileSystemMock) WriteFile(_a0 string, _a1 []byte, _a2 fs.FileMode) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, fs.FileMode) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileSystemMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileSystemMock creates a new instance of FileSystemMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileSystemMock(t mockConstructorTestingTNewFileSystemMock) *FileSystemMock {
	mock := &FileSystemMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
