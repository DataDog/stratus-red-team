// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	stratus "github.com/datadog/stratus-red-team/v2/pkg/stratus"
)

// StateManager is an autogenerated mock type for the StateManager type
type StateManager struct {
	mock.Mock
}

// CleanupTechnique provides a mock function with given fields:
func (_m *StateManager) CleanupTechnique() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtractTechnique provides a mock function with given fields:
func (_m *StateManager) ExtractTechnique() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRootDirectory provides a mock function with given fields:
func (_m *StateManager) GetRootDirectory() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTechniqueState provides a mock function with given fields:
func (_m *StateManager) GetTechniqueState() stratus.AttackTechniqueState {
	ret := _m.Called()

	var r0 stratus.AttackTechniqueState
	if rf, ok := ret.Get(0).(func() stratus.AttackTechniqueState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stratus.AttackTechniqueState)
	}

	return r0
}

// GetTerraformOutputs provides a mock function with given fields:
func (_m *StateManager) GetTerraformOutputs() (map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields:
func (_m *StateManager) Initialize() {
	_m.Called()
}

// SetTechniqueState provides a mock function with given fields: _a0
func (_m *StateManager) SetTechniqueState(_a0 stratus.AttackTechniqueState) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(stratus.AttackTechniqueState) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteTerraformOutputs provides a mock function with given fields: outputs
func (_m *StateManager) WriteTerraformOutputs(outputs map[string]string) error {
	ret := _m.Called(outputs)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(outputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStateManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateManager creates a new instance of StateManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateManager(t mockConstructorTestingTNewStateManager) *StateManager {
	mock := &StateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
